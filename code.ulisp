;; ==========  Prelude ========== 
; Don't-serial-reoutput
(defun h-println (x s) 
    (format s "~a~a~%" x #\return))

(defun inform (s)
  (print (concatenate 'string "casinfo: " s)))

(defun string->list-go (s acc)
  (if (equal s "") acc
    (string->list-go (subseq s 1)
                     (cons (char s 0) acc))))

(defun string->list (s) (reverse (string->list-go s '())))

(defvar morse-wpm 20)

(defvar base-len  (round (/ (* 60 1000) (* 50 morse-wpm))))
(defvar dit-len   (* 1 base-len))
(defvar dah-len   (* 3 base-len))
(defvar intra-len (* 1 base-len))
(defvar inter-len (* 3 base-len))
(defvar space-len (* 7 base-len))

(defvar led-brightness 170)
(defvar led-pin 25)
(pinmode 25 t)

(defun on (pin) (analogwrite pin led-brightness))
(defun off (pin) (analogwrite pin 0))

(defun char-to-morse (c)
  (case c
    (#\0 '(l l l l l))
    (#\1 '(s l l l l))
    (#\2 '(s s l l l))
    (#\3 '(s s s l l))
    (#\4 '(s s s s l))
    (#\5 '(s s s s s))
    (#\6 '(l s s s s))
    (#\7 '(l l s s s))
    (#\8 '(l l l s s))
    (#\9 '(l l l l s))
    (#\a '(s l))
    (#\b '(l s s s))
    (#\c '(l s l s))
    (#\d '(l s s))
    (#\e '(s))
    (#\f '(s s l s))
    (#\g '(l l s))
    (#\h '(s s s s))
    (#\i '(s s))
    (#\j '(s l l l))
    (#\k '(l s l))
    (#\l '(s l s s))
    (#\m '(l l))
    (#\n '(l s))
    (#\o '(l l l))
    (#\p '(s l l s))
    (#\q '(l l s l))
    (#\r '(s l s))
    (#\s '(s s s))
    (#\t '(l))
    (#\u '(s s l))
    (#\v '(s s s l))
    (#\w '(s l l))
    (#\x '(l s s l))
    (#\y '(l s l l))
    (#\z '(l l s s))
    (#\: '(l l l s s s))
    (#\? '(s s l l s s))
    ('t  '(s s l l s s))))

;; unit must be 's or 'l
;; Assumes pinmode is set
;; Assumes pin starts empty, immediately starts writing out
;; Ends with corresponding intra-word delay
(defun emit-morse-unit (unit pin)
  (on pin)
  (if (equal unit 's) (delay dit-len) (delay dah-len))
  (off pin)
  (delay intra-len))

(defun emit-morse-letter (units pin)
  (dolist (u units)
    (emit-morse-unit u pin)
    (delay inter-len)))

(defun emit-morse-word (word pin)
  (dolist (letter word)
    (emit-morse-letter letter pin)
    (delay space-len)))

(defun emit-morse-sentence (words pin)
  (dolist (word words)
    (emit-morse-word word pin)))

; 'word' is a normal string, cannot contain spaces
(defun transfer-word (word pin) (emit-morse-word (mapcar char-to-morse (string->list word)) pin))

; 'sentence' is a string that can contain spaces !
(defun transfer (sentence pin)
  (let ((ret '()) (rest sentence))
    (loop
     (let ((space_idx (search " " rest)))
       (when (not space_idx)
         (progn
           (setf ret (cons rest ret))
           (return)))
       (setf ret  (cons (subseq rest 0 space_idx) ret))
       (setf rest (subseq rest (1+ space_idx)))))
    (mapcar (lambda (w) (transfer-word w pin)) (reverse ret))
    nil))

;; ========== Setup ===========
(wifi-connect SSID PASSWD)

(defun get-data ()
  (with-client
   (s DATA-DOMAIN 80)
   (progn
     (inform "Starting")
     (h-println (concatenate 'string "GET " DATA-PATH " HTTP/1.1") s)
     (h-println "Host: api.tmb.cat" s)
     (h-println "Accept: */*" s)
     (h-println "" s)
     (inform "Sent stuff, entering to gather request")
     (let ((buffer ""))
       (loop
        (delay 100)
        (when (zerop (available s)) (return))
        (setf buffer (concatenate 'string buffer (read-line s) (format nil "~%"))))
       (inform "Exiting loop")
       buffer))))

; Must read: http://www.ulisp.com/show?19Q4
; I don't know the current time but I *can* get it from the internet!
; http://worldclockapi.com/api/json/utc/now



;; ========== Main execution ===========
