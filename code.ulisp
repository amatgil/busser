
; ==========  Prelude ========== 
; Comment to stop output buffer
(defun h-println (x s) 
    (format s "~a~a~%" x #\return))

(defun inform (s)
  (print (concatenate 'string "casinfo: " s)))

(defun string->list-go (s acc)
  (if (equal s "") acc
    (string->list-go (subseq s 1)
                     (cons (char s 0) acc))))

(defun string->list (s) (reverse (string->list-go s '())))

(defvar morse-wpm 20)

(defvar base-len  (round (/ (* 60 1000) (* 50 morse-wpm))))
(defvar dit-len   (* 1 base-len))
(defvar dah-len   (* 3 base-len))
(defvar intra-len (* 1 base-len))
(defvar inter-len (* 3 base-len))
(defvar space-len (* 7 base-len))

(defvar led-pin 16)
(pinmode 16 t)


(defun char-to-morse (c)
  (cond
   ((equal c #\a) '(s l))
   ((equal c #\d) '(s s l))
   ((equal c #\s) '(s s s))
   ((equal c #\o) '(l l l))
   ('t            '(s s l l s s))))

;; unit must be 's or 'l
;; Assumes pinmode is set
;; Assumes pin starts empty, immediately starts writing out
;; Ends with corresponding intra-word delay
(defun emit-morse-unit (unit pin)
  (digitalwrite pin t)
  (if (equal unit 's) (delay dit-len) (delay dah-len))
  (digitalwrite pin nil)
  (delay intra-len))

(defun emit-morse-letter (units pin)
  (dolist (u units)
    (emit-morse-unit u pin)
    (delay inter-len)))

(defun emit-morse-word (word pin)
  (dolist (letter word)
    (emit-morse-letter letter pin)
    (delay space-len)))

(defun emit-morse-sentence (words pin)
  (dolist (word words)
    (emit-morse-word word pin)))

; 'word' is a normal string
(defun transfer-word (word pin)
  (dolist))

;; ========== Setup ===========
; Comment to stop output buffer
(wifi-connect SSID PASSWD)

(defun get-data ()
  (with-client
   (s DATA-DOMAIN 80)
   (progn
     (inform "Starting")
     (h-println (concatenate 'string "GET " DATA-PATH " HTTP/1.1") s)
     (h-println "Host: api.tmb.cat" s)
     (h-println "Accept: */*" s)
     (h-println "" s)
     (inform "Sent stuff, entering to gather request")
     (let ((buffer ""))
       (loop
        (delay 100)
        (when (zerop (available s)) (return))
        (setf buffer (concatenate 'string buffer (read-line s) (format nil "~%"))))
       (inform "Exiting loop")
       buffer))))
;; ========== Main execution ===========
; Comment to stop output buffer
